[{"/Users/juanlu/code/lab-wiki-countries/src/reportWebVitals.js":"1","/Users/juanlu/code/lab-wiki-countries/src/App.js":"2","/Users/juanlu/code/lab-wiki-countries/src/components/Navbar.jsx":"3","/Users/juanlu/code/lab-wiki-countries/src/components/CountryDetails.jsx":"4","/Users/juanlu/code/lab-wiki-countries/src/components/CountriesList.jsx":"5","/Users/juanlu/code/lab-wiki-countries/src/index.js":"6","/Users/juanlu/code/lab-wiki-countries/src/components/ErrorPage.jsx":"7","/Users/juanlu/code/lab-wiki-countries/src/components/NavBar.jsx":"8"},{"size":362,"mtime":1638457423914,"results":"9","hashOfConfig":"10"},{"size":1225,"mtime":1638532565455,"results":"11","hashOfConfig":"10"},{"size":310,"mtime":1638531079290,"results":"12","hashOfConfig":"10"},{"size":1947,"mtime":1638531011539,"results":"13","hashOfConfig":"10"},{"size":1063,"mtime":1638531055621,"results":"14","hashOfConfig":"10"},{"size":452,"mtime":1638519987922,"results":"15","hashOfConfig":"10"},{"size":255,"mtime":1638530741553,"results":"16","hashOfConfig":"10"},{"size":310,"mtime":1638531189393,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1ce32y7",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/juanlu/code/lab-wiki-countries/src/reportWebVitals.js",[],["38","39"],"/Users/juanlu/code/lab-wiki-countries/src/App.js",[],"/Users/juanlu/code/lab-wiki-countries/src/components/Navbar.jsx",[],"/Users/juanlu/code/lab-wiki-countries/src/components/CountryDetails.jsx",["40"],"import { useParams } from 'react-router-dom';\nimport {useState} from 'react';\nimport { Link } from 'react-router-dom';\n\nconst CountryDetails = ({ countries }) => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const {id: countryId} = useParams()\n  const country = countries.find((country) => country.alpha3Code === countryId);\n\n  // Return statment based on the last iteration. For the previous iteration you need a map or depends how you have structured the code ;)\n  return (\n    <div>\n      {isLoading && <p>Data is loading...</p>}\n      {!isLoading && (\n        <div className=\"col-7\">\n          <img\n            src={`https://flagpedia.net/data/flags/w580/${country.alpha2Code.toLowerCase()}.png`}\n            alt=\"\"\n            width=\"300px\"\n            height=\"auto\"\n          />\n          <h1>{country.name.common}</h1>\n          <table className=\"table\">\n            <tbody>\n              <tr>\n                <td style={{ width: '30%' }}>Capital</td>\n                <td>{country.capital}</td>\n              </tr>\n              <tr>\n                <td>Area</td>\n                <td>\n                  {country.area} km <sup>2</sup>\n                </td>\n              </tr>\n              <tr>\n                <td>Borders</td>\n                <td>\n                  {country.borders.length === 0 ? (\n                    <p>This country has no neighbouring countries.</p>\n                  ) : (\n                    <ul>\n                      {country.borders.map((countryCode, index) => {\n                        return (\n                          <li key={index}>\n                            <Link to={countryCode}>{countryCode}</Link>;\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  )}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CountryDetails;\n",["41","42"],"/Users/juanlu/code/lab-wiki-countries/src/components/CountriesList.jsx",[],["43","44"],"/Users/juanlu/code/lab-wiki-countries/src/index.js",[],"/Users/juanlu/code/lab-wiki-countries/src/components/ErrorPage.jsx",[],"/Users/juanlu/code/lab-wiki-countries/src/components/NavBar.jsx",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":6,"column":21,"nodeType":"51","messageId":"52","endLine":6,"endColumn":33},{"ruleId":"45","replacedBy":"53"},{"ruleId":"47","replacedBy":"54"},{"ruleId":"45","replacedBy":"55"},{"ruleId":"47","replacedBy":"56"},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'setIsLoading' is assigned a value but never used.","Identifier","unusedVar",["57"],["58"],["57"],["58"],"no-global-assign","no-unsafe-negation"]